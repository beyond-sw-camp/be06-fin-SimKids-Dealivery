pipeline {
    agent any

    environment {
        // 현재 작업해야 할 값 (frontend, backend, all)을 저장할 변수
        TARGET_COMPONENT = ''
    }

    stages {

        stage('Clean up dealivery-pipeline directory') {
                steps {
                    script {
                        sh 'rm -rf ./* ./.git'
                    }
                }
            }

        stage('Clone Repository') {
            steps {
                // Git 리포지토리 클론
                echo "Cloning Repository..."
                git branch: 'develop', url: 'https://github.com/beyond-sw-camp/be06-fin-SimKids-Dealivery.git'
            }
        }

        stage('Check for Merge Event') {
            steps {
                script {
                    def changeLogSets = currentBuild.changeSets
                    def isMerge = false

                    changeLogSets.each { changeSet ->
                        changeSet.items.each { entry ->
                            // 커밋 메시지 확인
                            def commitMessage = entry.msg.toLowerCase()  // 소문자로 변환하여 비교
                            if (commitMessage.contains('merge')) {
                                isMerge = true
                            }

                            // 각 키워드 포함 여부 확인
                            if (commitMessage.contains('frontend')) {
                                TARGET_COMPONENT = 'frontend'
                            } else if (commitMessage.contains('backend')) {
                                TARGET_COMPONENT = 'backend'
                            } else if (commitMessage.contains('all')) {
                                TARGET_COMPONENT = 'all'
                            }
                        }
                    }

                    // 머지 이벤트 확인
                    if (!isMerge) {
                        echo 'This build is not triggered by a merge event.'
                        currentBuild.result = 'SUCCESS'  // 정상 종료
                        return  // 스크립트 종료
                    }

                    // 타겟 컴포넌트가 설정되지 않은 경우 처리
                    if (targetComponent == null) {
                        echo 'No valid component specified in commit message.'
                        currentBuild.result = 'SUCCESS'  // 정상 종료
                        return  // 스크립트 종료
                    } else {
                        echo "Target Component: ${TARGET_COMPONENT}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    if (TARGET_COMPONENT == 'backend') {
                        sh '''
                        chmod +x backend/gradlew
                        cd backend
                        ./gradlew bootJar
                        '''
                    } else if (TARGET_COMPONENT == 'frontend') {
                        sh '''
                        cd frontend
                        npm i
                        npm run build
                        '''
                    } else if (TARGET_COMPONENT == 'all') {
                        sh '''
                        chmod +x backend/gradlew
                        cd backend
                        ./gradlew bootJar
                        cd ../frontend
                        npm i
                        npm run build
                        '''
                    } else {
                        echo "Build Fail........................."
                    }
                }
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    echo "Dockerizing Components..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                               sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                                           }
                    if (TARGET_COMPONENT == 'backend') {
                       // Docker 이미지 빌드 및 푸시
                       sh '''
                       docker build --tag simkids/dealivery-backend:1.${BUILD_NUMBER} ./backend
                       docker push simkids/dealivery-backend:1.${BUILD_NUMBER}
                       '''
                    } else if (TARGET_COMPONENT == 'frontend') {
                        // Docker 이미지 빌드 및 푸시
                        sh '''
                        docker build --tag simkids/dealivery-frontend:1.${BUILD_NUMBER} ./frontend
                        docker push simkids/dealivery-frontend:1.${BUILD_NUMBER}
                        '''
                    } else if (TARGET_COMPONENT == 'all') {
                        sh '''
                        docker build --tag simkids/dealivery-backend:1.${BUILD_NUMBER} ./backend
                        docker build --tag simkids/dealivery-frontend:1.${BUILD_NUMBER} ./frontend
                        docker push simkids/dealivery-backend:1.${BUILD_NUMBER}
                        docker push simkids/dealivery-frontend:1.${BUILD_NUMBER}
                        '''
                    } else {
                        echo "Build Fail........................."
                    }
                }
            }
        }

        stage('Edit Manifest') {
            steps {
                script{
                    echo "Editing Manifest..."
                    sh 'cd ..'
                    sh 'git checkout argoCD'
                       if (TARGET_COMPONENT == 'backend') {
                           // 백엔드 rollout 수정 후
                          sh """
                          cd cicd/develop
                          sed -i 's/:1\\.[0-9]\\+/:1.${BUILD_NUMBER}/g' backend-rollout.yml
                          sed -i 's/:1\\.[0-9]\\+/:1.${BUILD_NUMBER}/g' backend-oauth-rollout.yml
                          """
                       } else if (TARGET_COMPONENT == 'frontend') {
                          sh """
                          cd cicd/develop
                          sed -i 's/:1\\.[0-9]\\+/:1.${BUILD_NUMBER}/g' frontend-rollout.yml
                          """
                       } else if (TARGET_COMPONENT == 'all') {
                          sh """
                          cd cicd/develop
                          sed -i 's/:1\\.[0-9]\\+/:1.${BUILD_NUMBER}/g' backend-rollout.yml
                          sed -i 's/:1\\.[0-9]\\+/:1.${BUILD_NUMBER}/g' backend-oauth-rollout.yml
                          sed -i 's/:1\\.[0-9]\\+/:1.${BUILD_NUMBER}/g' frontend-rollout.yml
                          """
                       } else {
                           echo "Rollout Edit Fail............................"
                       }
                }
            }
        }

        stage('Deploy') {
            steps {
                script{
                    echo "Deploying Components..."
                    withCredentials([
                           string(credentialsId: 'github_username', variable: 'GITHUB_USERNAME'),
                           string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN'),
                           string(credentialsId: 'repository', variable: 'GITHUB_URL')
                       ]) {
                              sh """
                              git add .
                              git commit -m "[Deploy] v1.${BUILD_NUMBER} ${TARGET_COMPONENT} 배포"
                              git remote set-url origin https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@${GITHUB_URL}
                              # 변경 사항을 원격 저장소의 cicd 브랜치로 푸시
                              git push origin argoCD
                              """
                       }

                }
            }
        }
    }

    post {
        success {
            sh '''
            echo "성공"
            '''
        }
        failure {
            sh 'echo "실패"'
        }
    }
}